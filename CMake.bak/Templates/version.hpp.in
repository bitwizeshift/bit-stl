/*****************************************************************************
* \file version.hpp
* \brief This header defines the general library version information through
*        macros to allow conditional compilation and library checks.
*
* This header defines the following macro symbols:
* - BIT_STL_MAKE_VERSION
* - BIT_STL_VERSION_MAJOR
* - BIT_STL_VERSION_MINOR
* - BIT_STL_VERSION_PATCH
* - BIT_STL_VERSION
*
* For more information for the symbols, refer to their respective
* documentation.
*
* \note This header is generated, and should not be modified directly.
*****************************************************************************/

/*
  The MIT License (MIT)

  Bit Standard Template Library.
  https://github.com/bitwizeshift/bit-stl

  Copyright (c) 2018 Matthew Rodusek

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/
#ifndef BIT_STL_VERSION_HPP
#define BIT_STL_VERSION_HPP

#ifdef BIT_STL_VERSION_MAJOR
# error "BIT_STL_VERSION_MAJOR defined before inclusion of the version header"
#endif

#ifdef BIT_STL_VERSION_MINOR
# error "BIT_STL_VERSION_MINOR defined before inclusion of the version header"
#endif

#ifdef BIT_STL_VERSION_PATCH
# error "BIT_STL_VERSION_PATCH defined before inclusion of the version header"
#endif

#ifdef BIT_STL_VERSION_STRING
# error "BIT_STL_VERSION_STRING defined before inclusion of the version header"
#endif

//! \def BIT_STL_MAKE_VERSION
//! \brief Converts a semantic version of major.minor.patch into a single
//!        integer value for easy macro comparisons
//!
//! \param major the major semantic version
//! \param minor the minor semantic version
//! \param patch the patch semantic version
#define BIT_STL_MAKE_VERSION(major,minor,patch) ((major * 100000) + (minor * 1000) + (patch))

//! Major version of this library
#define BIT_STL_VERSION_MAJOR @BIT_STL_VERSION_MAJOR@

//! Minor version of this library
#define BIT_STL_VERSION_MINOR @BIT_STL_VERSION_MINOR@

//! Patch version of this library
#define BIT_STL_VERSION_PATCH @BIT_STL_VERSION_PATCH@

//! The version string (major.minor.patch)
#define BIT_STL_VERSION_STRING "@BIT_STL_VERSION@"

//! The full version, represented as a single integer
#define BIT_STL_VERSION BIT_STL_MAKE_VERSION(@BIT_STL_VERSION_MAJOR@,@BIT_STL_VERSION_MINOR@,@BIT_STL_VERSION_PATCH@)

#endif // BIT_STL_VERSION_HPP
